var tipuesearch = {"pages":[{"text":"IR_Precision IR_Precision, Fortran (standard 2003+) module for achieving portable codes A KISS library for exploiting codes portability for modern (2003+) Fortran projects. What is IR_Precision? Fortran is the most popular programming language for scientific computing. With Fortran it is quite simple obtain fast code and manage large multidimensional array. Because Fortran permits the achievement of high performance it is also used on great range of different computer-architectures, and often on the fastest supercomputer in the world. Therefore Fortran programs must be portable : portability means that the code will give the same results on every different computer-architectures. One of the most important goal of the numeric code is to control the numeric error due to finite precision of numerical operations. Fortran uses the IEEE representations. Integers and reals (floating point) are represented with a finite precision. So when the code computes an operation it has a truncation error due to the truncation of the numerical finite representations. For numerical and more in general scientific applications this source of errors must be controlled. The programmer must know which is the precision associated to the code variables. Before the standard Fortran 90/95 there are not any way to select the precision of the numerical variables in a portable fashion. Modern Fortran standards (2003+) have introduced better support for codes portability. With the possibility to specify a kind parameter for variables, the standard Fortran 90+ makes available useful functions to select the kind precision in a portable parametric way. Using these functions the programmer can accurately control the precision of its own variables in a portable manner. IR_Precision module provides an effective KISS library to achieve portability and concurrently it provides many tools to handles parametrized numbers. Go to Top Main features The library provides portable kind-parameters and many useful procedures to deal with them: integer and reals parameters for 1,2,4,8,16 bytes-like representations; integer and real formats definitions for all parameters; integer and real minimum maximum representable numbers; number-to-string and string-to-number casting procedures; endianism procedures checking. Any feature request is welcome. Go to Top Copyrights IR_Precision is an open source project, it is distributed under the GPL v3 . Anyone is interest to use, to develop or to contribute to IR_Precision is welcome. Go to Top Documentation Besides this README file the IR_Precision documentation is contained into its own wiki . Detailed documentation of the API is contained into the GitHub Pages that can also be created locally by means of ford tool . A Taste of IR_Precision To be written. Go to Top Version History In the following the changelog of most important releases is reported. v1.0.1 Download ZIP ball or TAR one Stable release. Fully backward compatible. Introduce digit function. v1.0.0 Download ZIP ball or TAR one First Stable Release. Go to Top ChangeLog Version v1.0.1 Stable release. Fully backward compatible. Introduce digit function. Version v1.0.0 First stable release. Developer Info Stefano Zaghi","tags":"home","loc":"index.html","title":" IR_Precision "},{"text":"Procedures Procedure Location Procedure Type Description bctoi_I1P IR_Precision Function Procedure for converting bit-string to integer. This function achieves casting of bit-string to integer. bctoi_I2P IR_Precision Function Procedure for converting bit-string to integer. This function achieves casting of bit-string to integer. bctoi_I4P IR_Precision Function Procedure for converting bit-string to integer. This function achieves casting of bit-string to integer. bctoi_I8P IR_Precision Function Procedure for converting bit-string to integer. This function achieves casting of bit-string to integer. bcton IR_Precision Interface Procedure for converting bit-string to number, real or initeger, (bit-string to number type casting). bctor_R4P IR_Precision Function Procedure for converting bit-string to real. This function achieves casting of bit-string to real. bctor_R8P IR_Precision Function Procedure for converting bit-string to real. This function achieves casting of bit-string to real. bit_size IR_Precision Interface Overloading of the intrinsic bit_size function for computing the number of bits of (also) real and character variables. bit_size_chr IR_Precision Function Procedure for computing the number of bits of a character variable. bit_size_R16P IR_Precision Function Procedure for computing the number of bits of a real variable. bit_size_R4P IR_Precision Function Procedure for computing the number of bits of a real variable. bit_size_R8P IR_Precision Function Procedure for computing the number of bits of a real variable. bstr IR_Precision Interface Procedure for converting number, real and integer, to bit-string (number to bit-string type casting). bstr_I1P IR_Precision Function Procedure for converting integer to string of bits. This function achieves casting of integer to bit-string. bstr_I2P IR_Precision Function Procedure for converting integer to string of bits. This function achieves casting of integer to bit-string. bstr_I4P IR_Precision Function Procedure for converting integer to string of bits. This function achieves casting of integer to bit-string. bstr_I8P IR_Precision Function Procedure for converting integer to string of bits. This function achieves casting of integer to bit-string. bstr_R16P IR_Precision Function Procedure for converting real to string of bits. This function achieves casting of real to bit-string. bstr_R4P IR_Precision Function Procedure for converting real to string of bits. This function achieves casting of real to bit-string. bstr_R8P IR_Precision Function Procedure for converting real to string of bits. This function achieves casting of real to bit-string. byte_size IR_Precision Interface Overloading of the byte_size function for computing the number of bytes. byte_size_chr IR_Precision Function Procedure for computing the number of bytes of a character variable. byte_size_I1P IR_Precision Function Procedure for computing the number of bytes of an integer variable. byte_size_I2P IR_Precision Function Procedure for computing the number of bytes of an integer variable. byte_size_I4P IR_Precision Function Procedure for computing the number of bytes of an integer variable. byte_size_I8P IR_Precision Function Procedure for computing the number of bytes of an integer variable. byte_size_R16P IR_Precision Function Procedure for computing the number of bytes of a real variable. byte_size_R4P IR_Precision Function Procedure for computing the number of bytes of a real variable. byte_size_R8P IR_Precision Function Procedure for computing the number of bytes of a real variable. check_endian IR_Precision Subroutine Subroutine for checking the type of bit ordering (big or little endian) of the running architecture. ctoi_I1P IR_Precision Function Procedure for converting string to integer. This function achieves casting of string to integer. ctoi_I2P IR_Precision Function Procedure for converting string to integer. This function achieves casting of string to integer. ctoi_I4P IR_Precision Function Procedure for converting string to integer. This function achieves casting of string to integer. ctoi_I8P IR_Precision Function Procedure for converting string to integer. This function achieves casting of string to integer. cton IR_Precision Interface Procedure for converting string to number, real or initeger, (string to number type casting). ctor_R16P IR_Precision Function Procedure for converting string to real. This function achieves casting of string to real. ctor_R4P IR_Precision Function Procedure for converting string to real. This function achieves casting of string to real. ctor_R8P IR_Precision Function Procedure for converting string to real. This function achieves casting of string to real. digit IR_Precision Interface Procedure for computing the number of digits in decimal base of the input integer. digit_I1 IR_Precision Function Procedure for computing the number of digits in decimal base of the input integer. digit_I2 IR_Precision Function Procedure for computing the number of digits in decimal base of the input integer. digit_I4 IR_Precision Function Procedure for computing the number of digits in decimal base of the input integer. digit_I8 IR_Precision Function Procedure for computing the number of digits in decimal base of the input integer. IR_init IR_Precision Subroutine Procedure for initilizing module's variables that are not initialized into the definition specification. IR_Print IR_Precision Subroutine Procedure for printing to the standard output the kind definition of reals and integers and the utility variables. is_little_endian IR_Precision Function Procedure for checking if the type of the bit ordering of the running architecture is little endian. str IR_Precision Interface Procedure for converting number, real and integer, to string (number to string type casting). str_I1P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. str_I2P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. str_I4P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. str_I8P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. str_R16P IR_Precision Function Procedure for converting real to string. This function achieves casting of real to string. str_R4P IR_Precision Function Procedure for converting real to string. This function achieves casting of real to string. str_R8P IR_Precision Function Procedure for converting real to string. This function achieves casting of real to string. strf_I1P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. strf_I2P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. strf_I4P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. strf_I8P IR_Precision Function Procedure for converting integer to string. This function achieves casting of integer to string. strf_R16P IR_Precision Function Procedure for converting real to string. This function achieves casting of real to string. strf_R4P IR_Precision Function Procedure for converting real to string. This function achieves casting of real to string. strf_R8P IR_Precision Function Procedure for converting real to string. This function achieves casting of real to string. strz IR_Precision Interface Procedure for converting number, integer, to string, prefixing with the right number of zeros (number to string type\n casting with zero padding). strz_I1P IR_Precision Function Procedure for converting integer to string, prefixing with the right number of zeros. This function achieves casting of\n integer to string. strz_I2P IR_Precision Function Procedure for converting integer to string, prefixing with the right number of zeros. This function achieves casting of\n integer to string. strz_I4P IR_Precision Function Procedure for converting integer to string, prefixing with the right number of zeros. This function achieves casting of\n integer to string. strz_I8P IR_Precision Function Procedure for converting integer to string, prefixing with the right number of zeros. This function achieves casting of\n integer to string.","tags":"list procedures","loc":"lists/procedures.html","title":"\nAll Procedures – IR_Precision\n"},{"text":"Modules Module Source File Description IR_Precision IR_Precision.f90 Pure Fortran (2003+) library for ensuring codes portability","tags":"list modules","loc":"lists/modules.html","title":"\nAll Modules – IR_Precision\n"},{"text":"IR_Precision.f90 Source File Source File IR_Precision.f90","tags":"","loc":"sourcefile/ir_precision.f90.html","title":"IR_Precision.f90 – IR_Precision"},{"text":"is_little_endian Function Source File IR_Precision.f90 IR_Precision is_little_endian","tags":"","loc":"proc/is_little_endian.html","title":"is_little_endian – IR_Precision"},{"text":"bit_size_R16P Function Source File IR_Precision.f90 IR_Precision bit_size_R16P","tags":"","loc":"proc/bit_size_r16p.html","title":"bit_size_R16P – IR_Precision"},{"text":"bit_size_R8P Function Source File IR_Precision.f90 IR_Precision bit_size_R8P","tags":"","loc":"proc/bit_size_r8p.html","title":"bit_size_R8P – IR_Precision"},{"text":"bit_size_R4P Function Source File IR_Precision.f90 IR_Precision bit_size_R4P","tags":"","loc":"proc/bit_size_r4p.html","title":"bit_size_R4P – IR_Precision"},{"text":"bit_size_chr Function Source File IR_Precision.f90 IR_Precision bit_size_chr","tags":"","loc":"proc/bit_size_chr.html","title":"bit_size_chr – IR_Precision"},{"text":"byte_size_I8P Function Source File IR_Precision.f90 IR_Precision byte_size_I8P","tags":"","loc":"proc/byte_size_i8p.html","title":"byte_size_I8P – IR_Precision"},{"text":"byte_size_I4P Function Source File IR_Precision.f90 IR_Precision byte_size_I4P","tags":"","loc":"proc/byte_size_i4p.html","title":"byte_size_I4P – IR_Precision"},{"text":"byte_size_I2P Function Source File IR_Precision.f90 IR_Precision byte_size_I2P","tags":"","loc":"proc/byte_size_i2p.html","title":"byte_size_I2P – IR_Precision"},{"text":"byte_size_I1P Function Source File IR_Precision.f90 IR_Precision byte_size_I1P","tags":"","loc":"proc/byte_size_i1p.html","title":"byte_size_I1P – IR_Precision"},{"text":"byte_size_R16P Function Source File IR_Precision.f90 IR_Precision byte_size_R16P","tags":"","loc":"proc/byte_size_r16p.html","title":"byte_size_R16P – IR_Precision"},{"text":"byte_size_R8P Function Source File IR_Precision.f90 IR_Precision byte_size_R8P","tags":"","loc":"proc/byte_size_r8p.html","title":"byte_size_R8P – IR_Precision"},{"text":"byte_size_R4P Function Source File IR_Precision.f90 IR_Precision byte_size_R4P","tags":"","loc":"proc/byte_size_r4p.html","title":"byte_size_R4P – IR_Precision"},{"text":"byte_size_chr Function Source File IR_Precision.f90 IR_Precision byte_size_chr","tags":"","loc":"proc/byte_size_chr.html","title":"byte_size_chr – IR_Precision"},{"text":"strf_R16P Function Source File IR_Precision.f90 IR_Precision strf_R16P","tags":"","loc":"proc/strf_r16p.html","title":"strf_R16P – IR_Precision"},{"text":"strf_R8P Function Source File IR_Precision.f90 IR_Precision strf_R8P","tags":"","loc":"proc/strf_r8p.html","title":"strf_R8P – IR_Precision"},{"text":"strf_R4P Function Source File IR_Precision.f90 IR_Precision strf_R4P","tags":"","loc":"proc/strf_r4p.html","title":"strf_R4P – IR_Precision"},{"text":"strf_I8P Function Source File IR_Precision.f90 IR_Precision strf_I8P","tags":"","loc":"proc/strf_i8p.html","title":"strf_I8P – IR_Precision"},{"text":"strf_I4P Function Source File IR_Precision.f90 IR_Precision strf_I4P","tags":"","loc":"proc/strf_i4p.html","title":"strf_I4P – IR_Precision"},{"text":"strf_I2P Function Source File IR_Precision.f90 IR_Precision strf_I2P","tags":"","loc":"proc/strf_i2p.html","title":"strf_I2P – IR_Precision"},{"text":"strf_I1P Function Source File IR_Precision.f90 IR_Precision strf_I1P","tags":"","loc":"proc/strf_i1p.html","title":"strf_I1P – IR_Precision"},{"text":"str_R16P Function Source File IR_Precision.f90 IR_Precision str_R16P","tags":"","loc":"proc/str_r16p.html","title":"str_R16P – IR_Precision"},{"text":"str_R8P Function Source File IR_Precision.f90 IR_Precision str_R8P","tags":"","loc":"proc/str_r8p.html","title":"str_R8P – IR_Precision"},{"text":"str_R4P Function Source File IR_Precision.f90 IR_Precision str_R4P","tags":"","loc":"proc/str_r4p.html","title":"str_R4P – IR_Precision"},{"text":"str_I8P Function Source File IR_Precision.f90 IR_Precision str_I8P","tags":"","loc":"proc/str_i8p.html","title":"str_I8P – IR_Precision"},{"text":"str_I4P Function Source File IR_Precision.f90 IR_Precision str_I4P","tags":"","loc":"proc/str_i4p.html","title":"str_I4P – IR_Precision"},{"text":"str_I2P Function Source File IR_Precision.f90 IR_Precision str_I2P","tags":"","loc":"proc/str_i2p.html","title":"str_I2P – IR_Precision"},{"text":"str_I1P Function Source File IR_Precision.f90 IR_Precision str_I1P","tags":"","loc":"proc/str_i1p.html","title":"str_I1P – IR_Precision"},{"text":"strz_I8P Function Source File IR_Precision.f90 IR_Precision strz_I8P","tags":"","loc":"proc/strz_i8p.html","title":"strz_I8P – IR_Precision"},{"text":"strz_I4P Function Source File IR_Precision.f90 IR_Precision strz_I4P","tags":"","loc":"proc/strz_i4p.html","title":"strz_I4P – IR_Precision"},{"text":"strz_I2P Function Source File IR_Precision.f90 IR_Precision strz_I2P","tags":"","loc":"proc/strz_i2p.html","title":"strz_I2P – IR_Precision"},{"text":"strz_I1P Function Source File IR_Precision.f90 IR_Precision strz_I1P","tags":"","loc":"proc/strz_i1p.html","title":"strz_I1P – IR_Precision"},{"text":"ctor_R16P Function Source File IR_Precision.f90 IR_Precision ctor_R16P","tags":"","loc":"proc/ctor_r16p.html","title":"ctor_R16P – IR_Precision"},{"text":"ctor_R8P Function Source File IR_Precision.f90 IR_Precision ctor_R8P","tags":"","loc":"proc/ctor_r8p.html","title":"ctor_R8P – IR_Precision"},{"text":"ctor_R4P Function Source File IR_Precision.f90 IR_Precision ctor_R4P","tags":"","loc":"proc/ctor_r4p.html","title":"ctor_R4P – IR_Precision"},{"text":"ctoi_I8P Function Source File IR_Precision.f90 IR_Precision ctoi_I8P","tags":"","loc":"proc/ctoi_i8p.html","title":"ctoi_I8P – IR_Precision"},{"text":"ctoi_I4P Function Source File IR_Precision.f90 IR_Precision ctoi_I4P","tags":"","loc":"proc/ctoi_i4p.html","title":"ctoi_I4P – IR_Precision"},{"text":"ctoi_I2P Function Source File IR_Precision.f90 IR_Precision ctoi_I2P","tags":"","loc":"proc/ctoi_i2p.html","title":"ctoi_I2P – IR_Precision"},{"text":"ctoi_I1P Function Source File IR_Precision.f90 IR_Precision ctoi_I1P","tags":"","loc":"proc/ctoi_i1p.html","title":"ctoi_I1P – IR_Precision"},{"text":"bstr_R16P Function Source File IR_Precision.f90 IR_Precision bstr_R16P","tags":"","loc":"proc/bstr_r16p.html","title":"bstr_R16P – IR_Precision"},{"text":"bstr_R8P Function Source File IR_Precision.f90 IR_Precision bstr_R8P","tags":"","loc":"proc/bstr_r8p.html","title":"bstr_R8P – IR_Precision"},{"text":"bstr_R4P Function Source File IR_Precision.f90 IR_Precision bstr_R4P","tags":"","loc":"proc/bstr_r4p.html","title":"bstr_R4P – IR_Precision"},{"text":"bstr_I8P Function Source File IR_Precision.f90 IR_Precision bstr_I8P","tags":"","loc":"proc/bstr_i8p.html","title":"bstr_I8P – IR_Precision"},{"text":"bstr_I4P Function Source File IR_Precision.f90 IR_Precision bstr_I4P","tags":"","loc":"proc/bstr_i4p.html","title":"bstr_I4P – IR_Precision"},{"text":"bstr_I2P Function Source File IR_Precision.f90 IR_Precision bstr_I2P","tags":"","loc":"proc/bstr_i2p.html","title":"bstr_I2P – IR_Precision"},{"text":"bstr_I1P Function Source File IR_Precision.f90 IR_Precision bstr_I1P","tags":"","loc":"proc/bstr_i1p.html","title":"bstr_I1P – IR_Precision"},{"text":"bctor_R8P Function Source File IR_Precision.f90 IR_Precision bctor_R8P","tags":"","loc":"proc/bctor_r8p.html","title":"bctor_R8P – IR_Precision"},{"text":"bctor_R4P Function Source File IR_Precision.f90 IR_Precision bctor_R4P","tags":"","loc":"proc/bctor_r4p.html","title":"bctor_R4P – IR_Precision"},{"text":"bctoi_I8P Function Source File IR_Precision.f90 IR_Precision bctoi_I8P","tags":"","loc":"proc/bctoi_i8p.html","title":"bctoi_I8P – IR_Precision"},{"text":"bctoi_I4P Function Source File IR_Precision.f90 IR_Precision bctoi_I4P","tags":"","loc":"proc/bctoi_i4p.html","title":"bctoi_I4P – IR_Precision"},{"text":"bctoi_I2P Function Source File IR_Precision.f90 IR_Precision bctoi_I2P","tags":"","loc":"proc/bctoi_i2p.html","title":"bctoi_I2P – IR_Precision"},{"text":"bctoi_I1P Function Source File IR_Precision.f90 IR_Precision bctoi_I1P","tags":"","loc":"proc/bctoi_i1p.html","title":"bctoi_I1P – IR_Precision"},{"text":"digit_I8 Function Source File IR_Precision.f90 IR_Precision digit_I8","tags":"","loc":"proc/digit_i8.html","title":"digit_I8 – IR_Precision"},{"text":"digit_I4 Function Source File IR_Precision.f90 IR_Precision digit_I4","tags":"","loc":"proc/digit_i4.html","title":"digit_I4 – IR_Precision"},{"text":"digit_I2 Function Source File IR_Precision.f90 IR_Precision digit_I2","tags":"","loc":"proc/digit_i2.html","title":"digit_I2 – IR_Precision"},{"text":"digit_I1 Function Source File IR_Precision.f90 IR_Precision digit_I1","tags":"","loc":"proc/digit_i1.html","title":"digit_I1 – IR_Precision"},{"text":"check_endian Subroutine Source File IR_Precision.f90 IR_Precision check_endian","tags":"","loc":"proc/check_endian.html","title":"check_endian – IR_Precision"},{"text":"IR_init Subroutine Source File IR_Precision.f90 IR_Precision IR_init","tags":"","loc":"proc/ir_init.html","title":"IR_init – IR_Precision"},{"text":"IR_Print Subroutine Source File IR_Precision.f90 IR_Precision IR_Print","tags":"","loc":"proc/ir_print.html","title":"IR_Print – IR_Precision"},{"text":"bit_size Interface Source File IR_Precision.f90 IR_Precision bit_size","tags":"","loc":"interface/bit_size.html","title":"bit_size – IR_Precision"},{"text":"byte_size Interface Source File IR_Precision.f90 IR_Precision byte_size","tags":"","loc":"interface/byte_size.html","title":"byte_size – IR_Precision"},{"text":"str Interface Source File IR_Precision.f90 IR_Precision str","tags":"","loc":"interface/str.html","title":"str – IR_Precision"},{"text":"strz Interface Source File IR_Precision.f90 IR_Precision strz","tags":"","loc":"interface/strz.html","title":"strz – IR_Precision"},{"text":"cton Interface Source File IR_Precision.f90 IR_Precision cton","tags":"","loc":"interface/cton.html","title":"cton – IR_Precision"},{"text":"bstr Interface Source File IR_Precision.f90 IR_Precision bstr","tags":"","loc":"interface/bstr.html","title":"bstr – IR_Precision"},{"text":"bcton Interface Source File IR_Precision.f90 IR_Precision bcton","tags":"","loc":"interface/bcton.html","title":"bcton – IR_Precision"},{"text":"digit Interface Source File IR_Precision.f90 IR_Precision digit","tags":"","loc":"interface/digit.html","title":"digit – IR_Precision"},{"text":"IR_Precision Module Source File IR_Precision.f90 IR_Precision","tags":"","loc":"module/ir_precision.html","title":"IR_Precision – IR_Precision"}]}